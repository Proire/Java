1) accept 10 numbers from user and add them inside the ArrayList.
using ListIterator display all the numbers bidirectionally.
import java.util.*;
import java.util.Scanner;
class Demo
{
	public static void main(String args[])
	{
		List<Integer> list = new ArrayList<>();
		for(int i=0; i<10; i++)
		{
			list.add(new Scanner(System.in).nextInt())'
		}
		ListIterator itr = list.listIterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
		while(itr.hasPrevious())
		{
			System.out.println(itr.previous())
		}
	}
}
	
2) on the developer side:
	create a generic class which can accept any type
		with setters , getters and toString methods.
	create necessary jar files and  documentation.

on client side 
	create the object of above generic class and invoke its setters , getters and display the object.
class Demo<T>
{
	private T var;
	void set(T var)
	{
		this.var = var;
	}
	T get()
	{
		return var;
	}
	public static void main(String args[])
	{
		Demo<Integer> d1 = new Demo<Integer>();
		d1.set(20);
		System.out.println(d1.get());
		Demo<String> d2 = new Demo<String>();
		d1.set("prasad");
		System.out.println(d1.get());
		Demo<Demo> d3 = new Demo<Demo>();
		d1.set(d2);
		System.out.println(d3.get());
	}
}

3) create LinkedList with the values 10,20,30 and 40.
display it.
now insert 500 in the beginning.
	insert 400 at 2nd position.
	add 1000 at the end.
display the list again.
import java.util.*;
class Demo
{
	public static void main(String args[])
	{
		List<Integer> list = new LinkedList<>();
		list.add(10);
		list.add(20);
		list.add(30);
		list.add(40);
		((List)list.addfirst(500));
		((list)list.addlast(1000));
		list.add(2,400);
	}
}

4) add 5 numbers inside CopyOnWriteArrayList and show how can you add one more number at the same time of traversal through its iterator.
import java.util.*;
import java.util.concurrent.*;
public class Demo
{
	public static void main(String args[])
	{
		List<Integer> list = new CopyOnWriteArrayList<>();
		list.add(10);
		list.add(20);
		list.add(30);
		list.add(40);
		list.add(50);
		Iterator itr = list.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
			list.add(6);
		}
		

5) create a class "MyClass".
create 5 different objects of it.
add them in a ArrayList.
store ArrayList in file.
Now open a file, read ArrayList and display all objects.
sol
import java.util.*;
import java.io.*;
public class MyClass implements Serializable
{
	int num;
	MyClass(int num)
	{
		this.num = num;
	}
	public String toString()
	{
		return "["+num+"]";
	}
	public static void main(String args[])
	{
		List <MyClass> list = new ArrayList<>();
		list.add(new MyClass(10));
		list.add(new MyClass(20));
		list.add(new MyClass(30));
		list.add(new MyClass(40));
		list.add(new MyClass(50));
		try
		{
			FileOutputStream fos = new FileOutputStream("C:\\Users\\admin\\Desktop\\private\\a.txt");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(list);
			fos.close();
			oos.close();
		}
		catch(Exception ie)
		{}
		try
		{
			FileInputStream fis = new FileInputStream("C:\\Users\\admin\\Desktop\\private\\a.txt");
			ObjectInputStream ois = new ObjectInputStream(fis);
			List<?> l = (List<?>)ois.readObject();
			Iterator<?> itr = l.iterator();
			while(itr.hasNext())
			{
				System.out.println(itr.next());
			}
		}
		catch(Exception ie)
		{}
	}
}
		
6) create a HashMap.
store  prn no. and students name of 10 students inside the HashMap.
display it using iterator.
sol
import java.util.*;
import java.util.Map.*;
public class MyClass
{
	public static void main(String args[])
	{
		Map<Integer,String> map = new HashMap<>();
		map.put(10,"Messi");
		map.put(7,"Dhoni");
		map.put(17,"AB");
		map.put(1,"KL Rahul");
		map.put(56,"starc ");
		map.put(333,"Gayle");
		map.put(18,"Virat");
		map.put(3,"Raina");
		map.put(14,"Macculum");
		map.put(8,"Ellsy Perry");
		Set <?> s = map.entrySet();  // convert Map to set 
		Iterator<?> itr = s.iterator();
		while(itr.hasNext())
		{
			Map.Entry<?,?> me = itr.next();
			System.out.print(me.getKey()+ ":");
			System.out.println(me.getValue());
		}
	}
}
		
7) create a hierarchy as follows
	interface Game- play() method
	Derive at least 3 classes from it. ( Cricket, Chess and Football )
Now Create generic class which can take Game type (i.e. any sub type of Game) as parameter.
In this class try to call the play() method of the class which is passed to it.
sol
interface Game
{
	void play();
}
class Cricket implements Game
{
	public void play()
	{
		System.out.println(" Playing cricket....");
	}
}
class Chess implements Game
{
	public void play()
	{
		System.out.println(" Chess Playing ...");
	}
}
class Football implements Game
{
	public void play()
	{
		System.out.println(" Football Playing ...");
	}
}
class Play<T extends Game>
{
	Play(T ref)
	{
		ref.play();
	}	
	public static void main(String args[])
	{
		Play<Chess> chess = new Play<Chess>(new Chess());
		Play<Cricket> cricket = new Play<Cricket>(new Cricket());
		Play<Football> football= new Play<Football>(new Football());
	}
}

		

8) Define a class "Employee" with following members
empid, empname, desig, basic.
Define a parameterised constructor which will take all these values while creating an instance.
Also define "disp()" method which will display all these details.
create 4 employees and save them in "ArrayList".
Now save this "ArrayList" in a file.
Open file , read "ArrayList" , traverse ArrayList and call "disp()" for all the objects.
sol
import java.util.*;
import java.io.*;
class Employee implements Serializable
{
	int empid;
	String empname;
	char desig;
	double basic;
	Employee(int empid, String empname, char desig, double basic)
	{
		this.empid = empid;
		this.empname = empname;
		this.desig = desig;
		this.basic = basic;
	}
	void display()
	{
		System.out.println(" Empid : "+empid+" Empname : "+" Desig : "+desig+" basic : "+basic);
	}
	public static void main(String args[])
	{
		List<Employee> list = new ArrayList<>();
		list.add(new Employee(10,"virat",'A',180000000));
		list.add(new Employee(20,"Rohit",'A',150000000));
		list.add(new Employee(30,"Bumrah",'A',150000000));
		list.add(new Employee(40,"Hardik",'B',80000000));
		try
		{
			FileOutputStream fos = new FileOutputStream("C:\\Users\\admin\\Desktop\\private\\a.txt");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(list);
			FileInputStream fis = new FileInputStream("C:\\Users\\admin\\Desktop\\private\\a.txt");
			ObjectInputStream ois = new ObjectInputStream(fis);
			List l = (List)ois.readObject();
			Iterator itr = l.iterator();
			while(itr.hasNext())
			{
				System.out.println(itr.next());
			}
			fos.close();
			oos.close();
			fis.close();
			ois.close();
		}
		catch(Exception ie)
		{}
	}
}

9) maintain ICC ranking of at least 5 batsmen in the "HashMap".
list should be maintain as "rank" "name"
e.g. "1" "Rohit Sharma".
Now ask any rank bet'n 1 to 5 from user. ( user input).
if user asks for a particular rank , retrieve batsman name for that rank from the HashMap.
import java.util.Scanner;
import java.util.*;
public class Demo
{
	public static void main(String args[])
	{
		Map<Integer,String> map = new HashMap<>();
		map.put(1,"AB");
		map.put(2,"Steve");
		map.put(3,"Virat");
		map.put(4,"Babar");
		map.put(5,"Stokes");
		System.out.println("Enter rank you want :");
		int rank = new Scanner(System.in).nextInt();
		System.out.println(map.get(rank));
	}
}




