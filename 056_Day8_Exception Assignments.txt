1) define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.
sol:-
import java.util.Scanner;
public class MyArithException extends Exception
{
	MyArithException(String string)
	{
		super(string);
	}
}
public class Calculator
{
	static int caldouble(int number) throws MyArithException
	{
		if(number<0)
		{
			throw new MyArithException("NegativeNotAllowed");
		} 
		else if(number==0)
		{
			throw new MyArithException("ZeroNotAllowed");
		}
		return 2*number;
	}
} 
public class MyCalcApp
{
	public static void main(String args[])
	{
		System.out.println("Enter some Number");
		int number = new Scanner(System.in).nextInt();
		try
		{
		Calculator.caldouble(number);
		}
		catch(MyArithException ie)
		{
			System.out.println(ie);
		}
		System.out.println("Successfully Executed");
	}
}

2) on the developer side create an exception:
	NumberNotDivisibleBySevenException
	as a checked exception

create necessary jar and documentation.

on client side
	public class MyMath class with 
		public void disp(int num)
this disp() method will check if the number passed is not divisible by 7 , it will raise "NumberNotDivisibleBySevenException" or else it will simply display the number passed.
	[ this method shouldn't handle the exception]

	public class Demo
		main function 
		invoke "disp()" of "MyMath" class.
sol:-
import java.util.Scanner;
public class NumberNotDivisibleBySevenException extends Exception
{
	NumberNotDivisibleBySevenException(String string)
	{
		super(string);
	}
}

public class MyMath
{
	public static void disp(int num) throws NumberNotDivisibleBySevenException
	{
		if(num%7!=0)
		{
			throw new NumberNotDivisibleBySevenException(" Number is not divisible by seven ");
		}
		System.out.println(num);
	}
}
public class Demo
{
	public static void main(String args[])
	{
		try
		{
			MyMath.disp()
		}
		catch(NumberNotDivisibleBySevenException ie)
		{
			System.out.println(ie);
	`	}
	}
}

3) define "MyException" as a checked exception.

define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.
sol:-
import java.util.Scanner;
class MyException extends Exception
{
	MyException(String string)
	{
		super(string);
	}
}
public class Demo
{	
	public static void main(String args[])
	{
		new Demo().show1();
		System.out.println("Program Executed Successfully");
	}
	public void show1()
	{
		try
		{
			show2();
		}
		catch(MyException ie)
		{
			System.out.println(ie);
		}
		
	}
	public void show2() throws MyException
	{
		show3();
	}
	public void show3() throws MyException
	{
		System.out.println("Enter a Number");
		int num = new Scanner(System.in).nextInt();
		if(num>10)
		{
			throw new MyException(" NumberGreaterThan10");
		}
		System.out.println(num);
	}
}


4) on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.

on client side

public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.

sol:-
import java.util.Scanner;
class InvalidLengthException extends Exception
{
	InvalidLengthException(String string)
	{
		super(string);
	}
}
class Authenticator
{	
	String password;
	Authenticator(String string) throws InvalidLengthException
	{
		if(5>string.length() || string.length()>9)
		{
			throw new InvalidLengthException("Enter password between length 5 and 9");
		}
		password = string;
	}
	void done()
	{
		System.out.println("successful authentication");
	}
}
public class Demo
{
	public static void main(String args[])
	{
		System.out.println("Enter the password");
		String password = new Scanner(System.in).next();
		try
		{
		Authenticator authenticator = new Authenticator(password);
		authenticator.done();
		}
		catch(InvalidLengthException ie)
		{
			System.out.println(ie);
		}
	}
}
		
5) on the developer side 
create checked exception "ResourceNotAllocatedException"

create a class:

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    	void disp()
    	{
    		System.out.println("successful");
    	}
	@Override
	public void close()  {
		System.out.println("resource is closed");
	}
}

create necessary jar file and documentation

on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.


sol-
import java.util.Scanner;
class ResourceNotAllocatedException extends Exception
{
	ResourceNotAllocatedException(String string)
	{
		super(string);
	}
}
class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
	}
}
public class Demo
{
	public static void main(String args[])
	{
		System.out.println("Enter the capacity ");
		int capacity = new Scanner(System.in).nextInt();
		try(MyResource myresource = new MyResource(capacity))
		{
			myresource.disp();
		}
		catch(ResourceNotAllocatedException ie)
		{
			System.out.println(ie);
		}
	}
}
	

