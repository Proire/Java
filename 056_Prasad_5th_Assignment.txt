1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?
sol :-
package ClientApp;
class Vehicle
{
	public Vehicle()
	{
		System.out.println("Vehicle default constructor");
	}
}
class FourWheeler extends Vehicle
{
	public FourWheeler()
	{
		System.out.println("FourWheeler default constructor");
	}
}
class Car extends FourWheeler
{
	public Car()
	{
		System.out.println("Car default constructor");
	}
	public void display()
	{
		System.out.println("Car Display");
	}
}
public class CarDemo {

	public static void main(String[] args) {
		Car BMW = new Car();
		BMW.display();
	}

}

2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?
sol:- 
package ClientApp;
class Vehicle
{
	public Vehicle()
	{
		System.out.println("Vehicle default constructor");
	}
	public void start()
	{
		System.out.println("start the Vehicle");
	}
}
class FourWheeler extends Vehicle
{
	public FourWheeler()
	{
		System.out.println("FourWheeler default constructor");
	}
	//Overriding the start method by extending the functionality.
	public void start()
	{
		System.out.println("start the FourWheeler");
	}
}

public class FourWheelerDemo {

	public static void main(String[] args) {
		FourWheeler fourwheeler = new FourWheeler();
		fourwheeler.start();   // Vehicle's start method is overriding by FourWheeler's start
	}
}

3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.
sol:-
package ClientApp;
class Person
{
	public Person(int k)
	{
		System.out.println("Person default constructor");
	}
	public void Workout()
	{
		System.out.println("Normal Workout");
	}
}
class Player extends Person
{
	public Player()
	{
		super(0);
		System.out.println("Player default constructor");
	}
	public void Workout()
	{
		System.out.println("More Workout");
	}
}
class Athelete extends Person
{
	public Athelete() {
		super(0);
		System.out.println("Athelete default constructor");
	}
	public void Workout()
	{
		System.out.println("Most Workout");
	}
}
class Gamer extends Person
{

	public Gamer(int k) {
		super(k);
		System.out.println("Gamer default constructor");
	}
	
}
public class PersonDemo {

	public static void main(String[] args) {
		Gamer gamer = new Gamer(0);
		gamer.Workout();  // inherited from parent class method
		Athelete athelete = new Athelete();
		athelete.Workout();
		Player player = new Player();
		player.Workout();
	}
}

4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.
sol:-
package ClientApp;
class Top1
{
	public Top1(int k)
	{
		System.out.println("Top1 default constructor");
	}
	public void disp1()
	{
		System.out.println("Top disp1 method ....  ");
	}
}
class Bottom1 extends Top1
{
	public Bottom1()
	{
		super(0);
		System.out.println("Bottom1 default constructor");
	}
	public void disp1()
	{
		System.out.println("Bottom1 disp1 method ....  ");
	}
}
class Bottom2 extends Top1
{
	public Bottom2() {
		super(0);
		System.out.println("Bottom2 default constructor");
	}
	public void disp1()
	{
		System.out.println("Bottom2 disp1 method ......  ");
	}
}
class Bottom3 extends Top1
{

	public Bottom3(int k) {
		super(k);
		System.out.println("Bottom3 default constructor");
	}
	public void disp1()
	{
		System.out.println("Bottom3 disp1 method ......  ");
	}
	
}
public class TopDemo {
	static void display(Top1 top1)
	{
		top1.disp1();
	}

	public static void main(String[] args) {
		display(new Bottom1());
		display(new Bottom2());
		display(new Bottom3());
		
/*		Top1 top1[] = new Top1[3];
		top1[0] = new Bottom1();
		top1[1] = new Bottom2();
		top1[2] = new Bottom3(0);
		
		for(int i=0; i<top1.length; i++)
		{
			top1[i].disp1();
		}*/
	}
}

5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.
sol:- 
package ClientApp;
abstract class Shape
{
	abstract void draw();
	void display()
	{
		System.out.println("Shape display method ....  ");
	}
	
}
class Triangle extends Shape
{
	public void draw()
	{
		System.out.println("Draw Triangle");
	}
}
class Circle extends Shape
{
	public void draw()
	{
		System.out.println("Draw Circle");
	}
	public void display()
	{
		System.out.println("Circle display method ..... ");
	}
}
class Polygon extends Shape
{

	public void draw()
	{
		System.out.println("Draw Polygon");
	}
}
public class ShapeDemo {
	static void draw(Shape shape)
	{
		shape.draw();
	}

	public static void main(String[] args) {
		/*draw(new Polygon());
		draw(new Circle());
		draw(new Triangle());*/
		Shape shape[] = new Shape[3];
		shape[0] = new Polygon();
		shape[1] = new Circle();
		shape[2] = new Triangle();
		for(int i=0; i<shape.length; i++) 
		{
				shape[i].draw();
		}
	}
}


6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.
sol:-
package ClientApp;
interface A
{
	void disp1();
}
interface B extends A
{
	void disp2();
}
class C implements B
{
	public void disp1()
	{
		System.out.println("disp1 method");
	}
	public void disp2()
	{
		System.out.println("disp2 method");
	}
	void disp3()
	{
		System.out.println("disp3 method");
	}
}
public class ABCDemo {
	public static void main(String[] args) {
		C c = new C();
		c.disp1();
		c.disp2();
		c.disp3();
	}
}

7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.
sol:-
package ClientApp;
class Parent1
{
	String name;
	int number_of_childrens;
}
interface Parent2
{
	public void dispName();
	public void dispNumber_of_childrens();
	public void setName(String name);
	public void setNumber_of_childrens(int number_of_childrens);
}
class Child extends Parent1 implements Parent2
{
	public void dispName()
	{
		System.out.println("Name of the parent "+name);
	}
	public void setName(String name)
	{
		this.name = name;
	}
	public void setNumber_of_childrens(int number_of_childrens)
	{
		this.number_of_childrens = number_of_childrens;
	}
	public void dispNumber_of_childrens()
	{
		System.out.println("Number of childrens are "+number_of_childrens);
	}
}
public class childDemo
{
	public static void main(String args[])
	{
		Child child = new Child();
		child.dispName();
		child.dispNumber_of_childrens();
		child.setNumber_of_childrens(3);
		child.setName("Bapuji");
		child.dispName();
		child.dispNumber_of_childrens();
	}
		
8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.
sol:-
package ClientApp;
class base1
{
	int value;
	base1(int value)
	{
		this.value = value;
	}
}

class Sub1 extends base1
{
	int num;
	Sub1()
	{
		super(10); // default value to be 10
		num = 10;
	}
	Sub1(int value) {
		super(value);
		int num = 20;
	}
	Sub1(int value, int num)
	{
		super(value);
		this.num = num;
	}
	void display()
	{
		System.out.println("The value is "+value+" The value of num is "+num);
	}
}
public class SubDemo
{
	public static void main(String args[])
	{
		Sub1 sub1 = new Sub1();
		Sub1 sub2 = new Sub1(100);
		Sub1 sub3 = new Sub1(2000,3000);
		sub1.display();
		sub2.display();
		sub3.display();
	}
}

9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.
sol:- 
package ClientApp;
interface Game
{
	void play();
}
class Cricket implements Game
{
	public void play()
	{
		System.out.println("play cricket");
	}
}
class FootBall implements Game
{
	public void play()
	{
		System.out.println("play football");
	}
}
class Tennis implements Game
{
	public void play()
	{
		System.out.println("play tennis");
	}
}
public class Demo
{
	static void perform(Game game)
	{
		game.play();
	}
	public static void main(String args[])
	{
		perform(new Cricket());
		perform(new FootBall());
		perform(new Tennis());
	}
}








